$(function() {

	$("#download-theme").click(function() {
		// open the download modal
		var inst = $("[data-remodal-id=loadDownloadModal]").remodal();
		inst.open();
	});

	// magical code to create and download a file on the client side
	$("#download-css").click(function() {

		var n = "%0D%0A"; // new line
		
		$.getJSON("scripts/data/relations.json", function(data){

			var css = "data:text/css;charset=UTF-8,/* generated by nativescriptthemebuilder.com */" + n + n;

			$.each(data, function (index, value) {
				
				var elementId = value.id;
				var element = $("#" + elementId);

				// get element class, this will tell us if it's a color picker or text input
				var elementClass = element.attr("class");

				var output = "";

				if (elementClass == "enable-cp") {
					output = element.spectrum("get").toHexString();
				} else if (elementClass == "enable-txt") {
					output = element.val();
				}

				// loop through tns values
				$.each(value.tns, function (index, valueTns) {
					if (valueTns.class == ".action-bar") {
						// exception (addition) for action bar text color, which is programmatically determined
						css += valueTns.class + " {" + n + "color: " + idealTextColor(output) + ";" + n + "}" + n + n;
					} else if (valueTns.class == ".switch[checked=true]" || valueTns.class == ".slider") {
						// also an exception for the switch and slider circle colors
						css += valueTns.class + " {" + n + "color: " + idealTextColor(output) + ";" + n + "}" + n + n;
					} else if (valueTns.class == ".btn-outline" && valueTns.attr == "color") {
						// need to tweak the btn-outline background color transparency
						css += valueTns.class + " {" + n + "background-color: transparent;" + n + "}" + n + n;
						// need to add back the border-width property for android
						css += valueTns.class + " {" + n + "border-width: 1;" + n + "}" + n + n;
					}
					css += valueTns.class + " {" + n + valueTns.attr + ": " + output + ";" + n + "}" + n + n;
				});

			});

			downloadURI(css, "custom.css");

		});
	});

});

function downloadURI(uri, name) {
	// var link = document.createElement("a");
	// link.download = name;
	// link.href = uri;
	// document.body.appendChild(link);
	// link.click();
	// document.body.removeChild(link);
	// delete link;

	var isChrome = !!window.chrome && !!window.chrome.webstore;
    var link = document.createElement("a");

    if (isChrome && link.download !== undefined) {
        link.setAttribute("href", uri);
        link.setAttribute("download", name);
        link.click();
		delete link;
    } else {
        alert("Sorry, but CSS export only works in Chrome (yes, we are looking into a fix)!");
    }
}